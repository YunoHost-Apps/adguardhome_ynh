#!/bin/bash

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression "Stopping $app's systemd service..."

ynh_systemctl --service="$app" --action="stop"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression "Ensuring downward compatibility..."

# to remove some time in the future (DoH PR during testing phase residual)
if ! grep -q "port_https: 0" "$install_dir/AdGuardHome.yaml"; then
	ynh_write_var_in_file --file="$install_dir/AdGuardHome.yaml" --key="port_https" --value="0"
fi

if [ -z "${expose_port_53:-}" ] || [ "${expose_port_53:-}" = false ]; then
	# if 'expose_port_53' doesn't exist or is false

    expose_port_53="false"
	ynh_app_setting_set --key=expose_port_53 --value="$expose_port_53"
elif [ "${expose_port_53:-}" = true ]; then
    expose_port_53="true"
	ynh_app_setting_set --key=expose_port_53 --value="$expose_port_53"
fi

if [ -z "${dns_over_https:-}" ] || [ "${dns_over_https:-}" = false ]; then
	# if 'dns_over_https' doesn't exist or is false

	dns_over_https="false"
	ynh_app_setting_set --key=dns_over_https --value=$dns_over_https
elif [ "${dns_over_https:-}" = true ]; then
	dns_over_https="true"
	ynh_app_setting_set --key=dns_over_https --value=$dns_over_https
fi

# about all those 'ynh_write_var_in_file':
# AGH modifies by itself the config file when an user modifies it using the front-end
# so if we're using 'ynh_config_add' to process the config file, each
# regeneration of the config would break the user's changes :/ (yeah ik...)
# maybe one day we'll use python3 -c "import yaml" in place of this shit, but not today

# fill the 'tls:' section of the AGH configuration if necessary
if grep -q "certificate_path: \"\"" "$install_dir/AdGuardHome.yaml" || grep -q "private_key_path: \"\"" "$install_dir/AdGuardHome.yaml" || grep -q "server_name: \"\"" "$install_dir/AdGuardHome.yaml"; then
	ynh_write_var_in_file --file="$install_dir/AdGuardHome.yaml" --key="enabled" --after="tls:" --value="$dns_over_https"
	ynh_write_var_in_file --file="$install_dir/AdGuardHome.yaml" --key="server_name" --value="$domain"
	ynh_write_var_in_file --file="$install_dir/AdGuardHome.yaml" --key="allow_unencrypted_doh" --value="true"
	ynh_write_var_in_file --file="$install_dir/AdGuardHome.yaml" --key="certificate_path" --value="/etc/yunohost/certs/$domain/crt.pem"
	ynh_write_var_in_file --file="$install_dir/AdGuardHome.yaml" --key="private_key_path" --value="/etc/yunohost/certs/$domain/key.pem"
fi

# make sure that the ports configured for the app are those known by the package
ynh_write_var_in_file --file="$install_dir/AdGuardHome.yaml" --key="address" --after="http:" --value="127.0.0.1:$port"
ynh_write_var_in_file --file="$install_dir/AdGuardHome.yaml" --key="port_dns_over_tls" --value="$port_dns_over_tls"
ynh_write_var_in_file --file="$install_dir/AdGuardHome.yaml" --key="port_dns_over_quic" --value="$port_dns_over_quic"

# remove setting no longer required
ynh_app_setting_delete --key=port_adguard

if [ -z "${new_password:-}" ]; then
	ynh_app_setting_set --key=new_password --value=""
fi

#=================================================
# PROCESS OPENING/CLOSING PORTS
#=================================================
ynh_script_progression "Process opening & closing ports..."

# if the DNS port in the AGH config is not 53, make sure it is...
if ! [ "$(ynh_read_var_in_file --file="$install_dir/AdGuardHome.yaml" --key="port" --after="dns")" == "53" ]; then
	ynh_print_info "Fixing port 53 in the AGH config file..."
	ynh_write_var_in_file --file="$install_dir/AdGuardHome.yaml" --key="port" --after="dns" --value="53"
fi

# if the port 53 is not open, open it, it's mandatory to use AGH
if ! yunohost firewall list | grep -q " 53$"; then
    ynh_print_info "Opening port 53..."
    ynh_hide_warnings yunohost firewall allow Both 53
fi

if [ "${dns_over_https:-}" = true ]; then
	# if DoH and DoQ are closed
	if ! yunohost firewall list | grep -q " $port_dns_over_tls$" || ! yunohost firewall list | grep -q " $port_dns_over_quic$"; then
		ynh_print_info "Opening DoH and DoQ ports..."
		ynh_hide_warnings yunohost firewall allow Both "$port_dns_over_tls" --no-reload
		ynh_hide_warnings yunohost firewall allow UDP "$port_dns_over_quic"
	else
		# no need to open the ports, as they were opened at the 'Provisioning ports' step
		ynh_print_info "DoH and DoQ ports are open."
	fi
else
    # if dns_over_https is false, we need to close ports,
    # as they were opened at the 'Provisioning ports' step
    ynh_print_info "Closing DoH and DoQ ports..."
    ynh_hide_warnings yunohost firewall disallow Both "$port_dns_over_tls" --no-reload
    ynh_hide_warnings yunohost firewall disallow UDP "$port_dns_over_quic"
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# FIXME: this is still supported but the recommendation is now to *always* re-setup the app sources wether or not the upstream sources changed
if ynh_app_upstream_version_changed
then
	ynh_script_progression "Upgrading source files..."

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$install_dir" --full_replace --keep="data AdGuardHome.yaml"
fi

#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod -R o-rwx "$install_dir"
#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown -R "$app:$app" "$install_dir"
setcap 'CAP_NET_BIND_SERVICE=+eip CAP_NET_RAW=+eip' "$install_dir/AdGuardHome"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression "Upgrading NGINX web server configuration..."

# Create a dedicated NGINX config
ynh_config_add_nginx

# Create a dedicated systemd config
ynh_config_add_systemd

# declare needs_exposed_ports according to real user need
if [ "$dns_over_https" == "true" ] && [ "$expose_port_53" == "true" ]; then
    yunohost service add "$app" --description="Ads & trackers blocking DNS server" --needs_exposed_ports "53" "$port_dns_over_tls"
elif [ "$dns_over_https" == "true" ]; then
    yunohost service add "$app" --description="Ads & trackers blocking DNS server" --needs_exposed_ports "$port_dns_over_tls"
elif [ "$expose_port_53" == "true" ]; then
    yunohost service add "$app" --description="Ads & trackers blocking DNS server" --needs_exposed_ports "53"
else
    yunohost service add "$app" --description="Ads & trackers blocking DNS server"
fi

#=================================================

# adding the adguardhome dedicated user to the 'ssl-cert' group to permit the
# use of the Let's Encrypt certs for DOT/DOQ
usermod -a -G ssl-cert "$app"

# adding a kernel config file for DoQ
ynh_config_add --template="10-adguardhome.conf" --destination="/etc/sysctl.d/10-adguardhome.conf"

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression "Updating configuration..."

# get the name of the network interface in IPv4 and IPv6
ipv4_interface="$(get_network_interface 4)"
ipv6_interface="$(get_network_interface 6)"

# get IPv4 for the AGH config file
# the 'sed' is used to get rid of the network prefix ('/24' for example) and the router IP
ipv4_addr=$(process_ips "$(ip -4 address show "$ipv4_interface" 2> /dev/null | grep inet | sed 's&/.*&&')")

# get IPv6 for the AGH config file
# the 'sed' is used to get rid of the network prefix ('/64' for example)
ipv6_addr=$(process_ips "$(ip -6 address show "$ipv6_interface" 2> /dev/null | grep inet | sed 's&/.*&&')")

# update the IP adresses in the AGH config file
update_agh_ip_config

chmod 600 "$install_dir/AdGuardHome.yaml"
chown -R "$app:$app" "$install_dir/AdGuardHome.yaml"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

ynh_systemctl --service="$app" --action="restart" --log_path="systemd"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"

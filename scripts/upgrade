#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name="$app" --action="stop"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

if [ -n "$dns_over_https" ] && [ "$dns_over_https" == "1" ];
then
	dns_over_https="true"
	ynh_app_setting_set --app="$app" --key=dns_over_https --value=$dns_over_https
	# DNS over TLS
    	adguard_DoT_port=853
	ynh_app_setting_set --app=$app --key=adguard_DoT_port --value=$adguard_DoT_port
	ynh_exec_warn_less yunohost firewall allow --no-upnp UDP $adguard_DoT_port
	ynh_exec_warn_less yunohost firewall allow --no-upnp TCP $adguard_DoT_port
	# DNS over QUIC
    	adguard_DoQ_port=784
	ynh_app_setting_set --app="$app" --key=adguard_DoQ_port --value=$adguard_DoQ_port
	ynh_exec_warn_less yunohost firewall allow --no-upnp UDP $adguard_DoQ_port
elif [ -z "$dns_over_https" ] || [ "$dns_over_https" == "0" ];
then
	dns_over_https="false"
	ynh_app_setting_set --app="$app" --key=dns_over_https --value=$dns_over_https
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir=$install_dir 
fi

chmod -R o-rwx "$install_dir"
chown -R $app:$app "$install_dir"

setcap 'CAP_NET_BIND_SERVICE=+eip CAP_NET_RAW=+eip' $install_dir/AdGuardHome

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

# Create a dedicated systemd config
ynh_add_systemd_config

yunohost service add $app --description="Ads & trackers blocking DNS server" --needs_exposed_ports $port_adguard

#=================================================
# SPECIFIC UPGRADE
#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..." --weight=1

ipv4_interface=$(echo "$(ip -4 route get 1.2.3.4 2> /dev/null)" | head -n1 | grep -oP '(?<=dev )\w+' || true)
ipv6_interface=$(echo "$(ip -6 route get ::1.2.3.4 2> /dev/null)" | head -n1 | grep -oP '(?<=dev )\w+' || true)

if [ -z "$ipv4_interface" ] && [ -z "$ipv6_interface" ]; then
		ynh_die --message="Impossible to find the main network interface, please report this issue."
elif [ "$ipv4_interface" != "$ipv6_interface" ]; then
		if [ -z "$ipv4_interface" ]; then
				echo -e "bind-interfaces\nexcept-interface=$ipv6_interface" > "/etc/dnsmasq.d/$app"
		elif [ -z "$ipv6_interface" ]; then
				echo -e "bind-interfaces\nexcept-interface=$ipv4_interface" > "/etc/dnsmasq.d/$app"
		else
				echo -e "bind-interfaces\nexcept-interface=$ipv4_interface, $ipv6_interface" > "/etc/dnsmasq.d/$app"
		fi
else
		echo -e "bind-interfaces\nexcept-interface=$ipv4_interface" > "/etc/dnsmasq.d/$app"
fi

systemctl restart dnsmasq

ynh_store_file_checksum --file="/etc/dnsmasq.d/$app"

ipv4_route_output=$(echo "$(ip -4 route get 1.2.3.4 2> /dev/null)" | head -n1)
ipv6_route_output=$(echo "$(ip -6 route get ::1.2.3.4 2> /dev/null)" | head -n1)

ipv4_addr=""
for i in $(seq "$(echo "$ipv4_route_output" | wc -w)" -1 1); do
		ip=$(echo "$ipv4_route_output" | awk "{print \$$i}")
		if ynh_validate_ip4 --ip_address="$ip"; then
				ipv4_addr="$ip"
				break
		fi
done

ipv6_addr=""
for i in $(seq "$(echo "$ipv6_route_output" | wc -w)" -1 1); do
		ip=$(echo "$ipv6_route_output" | awk "{print \$$i}")
		if ynh_validate_ip6 --ip_address="$ip"; then
				ipv6_addr="$ip"
				break
		fi
done

# Reset the bind_hosts if the current ip is 0.0.0.0
python3 -c "import yaml
with open(\"$install_dir/AdGuardHome.yaml\", 'r') as file:
	conf_file = yaml.safe_load(file)

need_file_update = False

if \"0.0.0.0\" in conf_file[\"dns\"][\"bind_hosts\"]:
	conf_file[\"dns\"][\"bind_hosts\"] = []
	if \"$ipv4_addr\":
		conf_file[\"dns\"][\"bind_hosts\"].append(\"$ipv4_addr\")
	if \"$ipv6_addr\":
		conf_file[\"dns\"][\"bind_hosts\"].append(\"$ipv6_addr\")
	need_file_update = True

if conf_file[\"dns\"][\"port\"] != $port_adguard:
	conf_file[\"dns\"][\"port\"] = $port_adguard
	need_file_update = True
	
if need_file_update:
	with open(\"$install_dir/AdGuardHome.yaml\", 'w') as file:
		yaml.dump(conf_file, file)
"

chmod 600 "$install_dir/AdGuardHome.yaml"
chown -R $app:$app "$install_dir/AdGuardHome.yaml"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name="$app" --action="restart" --log_path="systemd"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last

#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=2

if [ "$dns_over_https" == "1" ];
then
    dns_over_https="true"
    # DNS over TLS
    adguard_DoT_port=853
    ynh_app_setting_set --app="$app" --key=adguard_DoT_port --value=$adguard_DoT_port
    ynh_exec_warn_less yunohost firewall allow --no-upnp UDP $adguard_DoT_port
    ynh_exec_warn_less yunohost firewall allow --no-upnp TCP $adguard_DoT_port
    # DNS over QUIC
    adguard_DoQ_port=784
    ynh_app_setting_set --app="$app" --key=adguard_DoQ_port --value=$adguard_DoQ_port
    ynh_exec_warn_less yunohost firewall allow --no-upnp UDP $adguard_DoQ_port
else
    dns_over_https="false"
fi
ynh_app_setting_set --app="$app" --key=dns_over_https --value=$dns_over_https

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=4

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir=$install_dir 

chmod -R o-rwx "$install_dir"
chown -R $app:$app "$install_dir"

setcap 'CAP_NET_BIND_SERVICE=+eip CAP_NET_RAW=+eip' $install_dir/AdGuardHome

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=3

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SPECIFIC SETUP
#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..." --weight=1

# echo the ip route command to prevent a crash if the server doesn't have any ipv4/6
ipv4_interface=$(echo "$(ip -4 route get 1.2.3.4 2> /dev/null)" | head -n1 | grep -oP '(?<=dev )\w+' || true)
ipv6_interface=$(echo "$(ip -6 route get ::1.2.3.4 2> /dev/null)" | head -n1 | grep -oP '(?<=dev )\w+' || true)

if [ -z "$ipv4_interface" ] && [ -z "$ipv6_interface" ]; then
    ynh_die --message="Impossible to find the main network interface, please report this issue."
elif [ "$ipv4_interface" != "$ipv6_interface" ]; then
    if [ -z "$ipv4_interface" ]; then
        echo -e "bind-interface\nexcept-interface=$ipv6_interface" > "/etc/dnsmasq.d/$app"
    elif [ -z "$ipv6_interface" ]; then
        echo -e "bind-interfaces\nexcept-interface=$ipv4_interface" > "/etc/dnsmasq.d/$app"
    else
        echo -e "bind-interfaces\nexcept-interface=$ipv4_interface, $ipv6_interface" > "/etc/dnsmasq.d/$app"
    fi
else
    echo -e "bind-interfaces\nexcept-interface=$ipv4_interface" > "/etc/dnsmasq.d/$app"
fi

systemctl restart dnsmasq

ynh_store_file_checksum --file="/etc/dnsmasq.d/$app"

ipv4_route_output=$(echo "$(ip -4 route get 1.2.3.4 2> /dev/null)" | head -n1 | head -n1)
ipv6_route_output=$(echo "$(ip -6 route get ::1.2.3.4 2> /dev/null)" | head -n1)

ipv4_addr=""
for i in $(seq "$(echo "$ipv4_route_output" | wc -w)" -1 1); do
    ip=$(echo "$ipv4_route_output" | awk "{print \$$i}")
    if ynh_validate_ip4 --ip_address="$ip"; then
        ipv4_addr="- $ip"
        break
    fi
done

ipv6_addr=""
for i in $(seq "$(echo "$ipv6_route_output" | wc -w)" -1 1); do
    ip=$(echo "$ipv6_route_output" | awk "{print \$$i}")
    if ynh_validate_ip6 --ip_address="$ip"; then
        ipv6_addr="- $ip"
        break
    fi
done

password=$(python3 -c "import bcrypt; print(bcrypt.hashpw(b\"$password\", bcrypt.gensalt(rounds=10)).decode())")
ynh_app_setting_set --app="$app" --key=password --value="$password"

# Main config File
ynh_add_config --template="../conf/AdGuardHome.yaml" --destination="$install_dir/AdGuardHome.yaml"

chmod 600 "$install_dir/AdGuardHome.yaml"
chown -R $app:$app "$install_dir/AdGuardHome.yaml"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config

yunohost service add $app --description="Ads & trackers blocking DNS server" --needs_exposed_ports 53

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=2

# Start a systemd service
ynh_systemd_action --service_name="$app" --action="restart" --log_path=systemd

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last

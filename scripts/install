#!/bin/bash

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression "Storing installation settings..."

if [[ $dns_over_https == 1 ]]; then
    dns_over_https="true"
else
    dns_over_https="false"
fi

ynh_app_setting_set --key=dns_over_https --value="$dns_over_https"

if [[ $expose_port_53 == 1 ]]; then
    expose_port_53="true"
else
    expose_port_53="false"
fi

ynh_app_setting_set --key=expose_port_53 --value="$expose_port_53"

ynh_app_setting_set --key=new_password --value=""

# workaround for https://github.com/YunoHost/issues/issues/2422
ynh_app_setting_set --key=protect_against_basic_auth_spoofing --value=False

#=================================================
# PROCESS OPENING/CLOSING PORTS
#=================================================
ynh_script_progression "Process opening & closing ports..."

# if the port 53 is not open, open it, it's mandatory to use AGH
if ! yunohost firewall list | grep -q " 53$"; then
    ynh_print_info "Opening port 53..."
    ynh_hide_warnings yunohost firewall allow Both 53
fi

if [ "${dns_over_https:-}" = true ]; then
	# if DoH and DoQ are closed
	if ! yunohost firewall list | grep -q " $port_dns_over_tls$" && ! yunohost firewall list | grep -q " $port_dns_over_quic$"; then
		ynh_print_info "Opening DoH and DoQ ports..."
		ynh_hide_warnings yunohost firewall allow Both "$port_dns_over_tls" --no-reload
		ynh_hide_warnings yunohost firewall allow UDP "$port_dns_over_quic"
	else
		# no need to open the ports, as they were opened at the 'Provisioning ports' step
		ynh_print_info "DoH and DoQ ports are open."
	fi
else
    # if dns_over_https is false, we need to close ports,
    # as they were opened at the 'Provisioning ports' step
    ynh_print_info "Closing DoH and DoQ ports..."
    ynh_hide_warnings yunohost firewall disallow Both "$port_dns_over_tls" --no-reload
    ynh_hide_warnings yunohost firewall disallow UDP "$port_dns_over_quic"
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$install_dir"

#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod -R o-rwx "$install_dir"
#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown -R "$app:$app" "$install_dir"
setcap 'CAP_NET_BIND_SERVICE=+eip CAP_NET_RAW=+eip' "$install_dir/AdGuardHome"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression "Configuring NGINX web server..."

# Create a dedicated NGINX config
ynh_config_add_nginx

#=================================================
# SPECIFIC SETUP
#=================================================

# adding the adguardhome dedicated user to the 'ssl-cert' group to permit the
# use of the Let's Encrypt certs for DOT/DOQ
usermod -a -G ssl-cert "$app"

# adding a kernel config file for DoQ
ynh_config_add --template="10-adguardhome.conf" --destination="/etc/sysctl.d/10-adguardhome.conf"

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression "Adding $app's configuration..."

# user's password encryption
password=$(python3 -c "import bcrypt; print(bcrypt.hashpw(b\"$password\", bcrypt.gensalt(rounds=10)).decode())")
ynh_app_setting_set --key=password --value="$password"

# Main config File
ynh_config_add --template="AdGuardHome.yaml" --destination="$install_dir/AdGuardHome.yaml"

# get the name of the network interface in IPv4 and IPv6
ipv4_interface="$(get_network_interface 4)"
ipv6_interface="$(get_network_interface 6)"

# put the network interface in a dedicated dnsmasq config
configure_network_interface_dnsmasq "$ipv4_interface" "$ipv6_interface"

# get IPv4 for the AGH config file
# the 'sed' is used to get rid of the network prefix ('/24' for example) and the router IP
ipv4_addr=$(process_ips "$(ip -4 address show "$ipv4_interface" 2> /dev/null | grep inet | sed 's&/.*&&')")

# get IPv6 for the AGH config file
# the 'sed' is used to get rid of the network prefix ('/64' for example)
ipv6_addr=$(process_ips "$(ip -6 address show "$ipv6_interface" 2> /dev/null | grep inet | sed 's&/.*&&')")

# update the IP adresses in the AGH config file
update_agh_ip_config

chmod 600 "$install_dir/AdGuardHome.yaml"
chown -R "$app:$app" "$install_dir/AdGuardHome.yaml"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression "Configuring $app's systemd service..."

# Create a dedicated systemd config
ynh_config_add_systemd

# declare needs_exposed_ports according to real user need
if [ "$dns_over_https" == "true" ] && [ "$expose_port_53" == "true" ]; then
    yunohost service add "$app" --description="Ads & trackers blocking DNS server" --needs_exposed_ports "53" "$port_dns_over_tls"
elif [ "$dns_over_https" == "true" ]; then
    yunohost service add "$app" --description="Ads & trackers blocking DNS server" --needs_exposed_ports "$port_dns_over_tls"
elif [ "$expose_port_53" == "true" ]; then
    yunohost service add "$app" --description="Ads & trackers blocking DNS server" --needs_exposed_ports "53"
else
    yunohost service add "$app" --description="Ads & trackers blocking DNS server"
fi

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

# Start a systemd service
ynh_systemctl --service="$app" --action="restart" --log_path=systemd

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
